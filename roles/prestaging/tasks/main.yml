---
- debug: var="ping.msg['{{ inventory_hostname }}']"
  register: current_ping_values

- debug: msg="{{ current_ping_values | get_rsync_server }}"
  register: rsync_host

- debug: var="rsync_host.msg"

- name: Save running config before starting
  ios_config:
    save_when: always

- name: debug primary flash name
  debug: var="device_primary_flash"
  when: device_primary_flash is defined

- name: debug secondary flash
  debug: var="device_secondary_flash"
  when: device_secondary_flash is defined

- name: Removing inactive software images
  cli_command:
    command: "install remove inactive"
    check_all: True
    prompt:
      - "Do you want to remove the above files"
    answer:
      - "y"

- block:
    - name: Calculate Free Storage
      include_role:
        name: utils/calculate_free_storage

    - name: Assert that IOS device has free memory in primary memory
      assert:
        that:
          - "'ios' == ansible_net_system"
          - 1000 < primary_flash_memfree_mb | default('1001') | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      when: primary_flash_memfree_mb is defined

    - name: Assert that IOS device has free memory in secondary memory
      assert:
        that:
          - "'ios' == ansible_net_system"
          - 1000 < secondary_flash_memfree_mb | default('1001') | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      when: secondary_flash_memfree_mb is defined

- debug: var="copy scp://{{ rsync_u }}:{{ rsync_p }}@{{ rsync_host.msg }}/u01/svc_rsync/rsynced_data/IOS/{{ expected_os_version }} {{ device_primary_flash }}:/"

# - name: Remote copy of IOS image to primary flash
#   ios_command:
#     commands:
#       - command: "copy scp://{{ rsync_u }}:{{ rsync_p }}@{{ rsync_host.msg }}/u01/svc_rsync/rsynced_data/IOS/{{ expected_os_version }} {{ device_primary_flash }}:/"
#         prompt: "Destination filename"
#         answer: "\r"
#   vars:
#     ansible_command_timeout: 10800
#   register: output

# copy image from primary to secondary

# Get md5 of IOS file in secondary flash

# Assert that MD5 of secondary flash IOS file Is Correct
