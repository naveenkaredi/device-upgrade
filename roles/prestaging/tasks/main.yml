---
- debug: var="ping.msg['{{ inventory_hostname }}']"
  register: current_ping_values

- debug: msg="{{ current_ping_values | get_rsync_server }}"
  register: rsync_host

- debug: var="rsync_host.msg"

- name: Save running config before starting
  ios_config:
    save_when: always

- name: debug primary flash name
  debug: var="device_primary_flash"
  when: device_primary_flash is defined

- name: debug secondary flash
  debug: var="device_secondary_flash"
  when: device_secondary_flash is defined

# - name: Removing inactive software images
#   cli_command:
#     command: "install remove inactive"
#     check_all: True
#     prompt:
#       - "Do you want to remove the above files"
#     answer:
#       - "y"

- block:
    - name: Calculate Free Storage
      include_role:
        name: utils/calculate_free_storage

    - name: Assert that IOS device has free memory in primary memory
      assert:
        that:
          - "'ios' == ansible_net_system"
          - 1000 < primary_flash_memfree_mb | default('1001') | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      when: primary_flash_memfree_mb is defined

    - name: Assert that IOS device has free memory in secondary memory
      assert:
        that:
          - "'ios' == ansible_net_system"
          - 1000 < secondary_flash_memfree_mb | default('1001') | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      when: secondary_flash_memfree_mb is defined

- name: Check image in primary flash
  ios_command:
    commands:
      - command: "dir | include {{ expected_os_version }}"
  register: output

- debug: msg="{{output}}"

- name: Remote copy of IOS image to primary flash
  vars:
    ansible_command_timeout: 10800
  ios_command:
    commands:
      - command: "copy scp://{{ rsync_u }}:{{ rsync_p }}@{{ rsync_host.msg }}/rsynced_data/IOS/{{ expected_os_version }} {{ device_primary_flash }}:/"
        prompt: "Destination filename"
        answer: "\r"
  when: "(output['stdout'][0]|length) == 0"

- name: Get md5 of IOS file in primary flash
  vars:
    ansible_command_timeout: 10800
  ios_command:
    commands:
      - "verify /md5 {{ device_primary_flash }}:/{{ expected_os_version }}"
  register: output

- debug: msg="{{output}}"

- name: Assert that MD5 of primary flash IOS file Is Correct
  assert:
    that:
      - md5_value == "output['stdout'][0].split('=')[-1] | replace(' ', '')"

- block:
    - name: Check image in secondary flash
      ios_command:
        commands:
          - command: "dir {{ device_secondary_flash }}: | include {{ expected_os_version }}"
      register: output

    - debug: msg="{{output}}"

    - name: Copy IOS image from primary to secondary flash
      vars:
        ansible_command_timeout: 10800
      cli_command:
        command: "copy {{ device_primary_flash }}:/{{ expected_os_version }} {{ device_secondary_flash }}:/"
        check_all: True
        prompt:
          - "Destination filename"
          - "Do you want to"
        answer:
          - "{{ expected_os_version }}"
          - "y"
      when: "(output['stdout'][0]|length) == 0"

    - name: Get md5 of IOS file in secondary flash
      vars:
        ansible_command_timeout: 10800
      ios_command:
        commands:
          - "verify /md5 {{ device_secondary_flash }}:/{{ expected_os_version }}"
      register: output
      

    - name: Assert that MD5 of secondary flash IOS file Is Correct
      assert:
        that:
          - md5_value == "{{ output['stdout'][0].split('=')[-1] | replace(' ', '') }}"
  when: device_secondary_flash is defined
